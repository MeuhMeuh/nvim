# tmux-sessionizer
tmux_sessionizer() {
    tmux-sessionizer
}

# Fuzzy history search
fzistory () {
  cmd=$(history 0 | sort -rn | cut -c 8- | tr "\t" " " | uniq -u | fzf --height=7 --layout=reverse --no-sort)
  zle reset-prompt

  if [ -n "$cmd" ]; then
    zle -U "$cmd"
  fi
}

# ############ SWILE ##########

# Start an ssh base IP tunnel to a target CIDR
# ssm-tunnel <cidr> <aws-profile?> <aws-region?> <tier?>
function ssm-tunnel() {
  local targetCidr="${1}"
  awsArgs=(--profile ${2:-central-network} --region ${3:-eu-west-3} --output json)
  local tier=${4:-Human}

  # Instance selection
  local bastionInstances=$(aws autoscaling describe-auto-scaling-groups ${awsArgs[@]} --filters Name=tag:Role,Values=bastion Name=tag:Tier,Values=${tier} | grep -v 'AWS token' | jq -r '.AutoScalingGroups[] | .Instances[] | select(.LifecycleState == "InService" and .HealthStatus == "Healthy") | .InstanceId')
  if [[ -z "${bastionInstances}" ]]; then
    echo "No Bastion instances available"
    return 2
  fi
  # Round robin bastion selection
  selectedBastionInstance="$(echo "${bastionInstances}" | shuf | head -n 1)"
  echo "Selected bastion : '${selectedBastionInstance}'"
	reason="${RANDOM}"
  
  function cleanup() {
    ssmSessionId=$(aws ssm describe-sessions ${awsArgs[@]} --state Active --filters key=Target,value=${selectedBastionInstance} key=Status,value=Connected | \
			grep -v 'AWS token' | \
      jq -r ".Sessions[] | select(.Reason == \"${reason}\") | .SessionId")

    if [[ -n "${ssmSessionId}" ]]; then
      echo "Terminating SSM Session ${ssmSessionId} on ${selectedBastionInstance} for ${reason}..."
      aws ssm terminate-session ${awsArgs[@]} --session-id ${ssmSessionId}
    fi
  }
  trap cleanup EXIT

  sshuttle -e 'ssh -o CheckHostIP=no -o AddressFamily=inet -o GSSAPIAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o ProxyCommand='\''bash -c "aws ssm start-session --profile='${2:-central-network}' --region '${3:-eu-west-3}' --target %h --document-name SSM-StartSSHSession --reason '${reason}' --parameters '\''portNumber=%p'\''" '\''' --dns -r ec2-user@${selectedBastionInstance} ${targetCidr} 172.16.0.0/12
}
